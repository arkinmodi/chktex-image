#!/usr/bin/env python3
from __future__ import annotations

import argparse
import os.path
import subprocess
import tempfile


def test_version(*, docker: str, tag: str) -> None:
    subprocess.run(
        (docker, 'run', '--rm', tag, 'chktex', '--version'),
        check=True,
    )


CLEAN_FILE_A = '''\
\\documentclass{article}
\\begin{document}
\\input{clean_file_b.tex}
\\end{document}
'''

CLEAN_FILE_B = '''\
file1
\\textbf{bold text}
%% comment1

%% comment2

more file1

'''


def test_clean_file(*, docker: str, tag: str) -> None:
    with tempfile.TemporaryDirectory() as tmpdir:
        with open(os.path.join(tmpdir, 'clean_file_a.tex'), 'w') as f:
            f.write(CLEAN_FILE_A)
        with open(os.path.join(tmpdir, 'clean_file_b.tex'), 'w') as f:
            f.write(CLEAN_FILE_B)

        subprocess.run(
            (
                docker, 'run', '--rm',
                '--workdir',  '/chktex',
                '--volume', f'{tmpdir}:/chktex:ro',
                tag, 'chktex', 'clean_file_a.tex',
            ),
            check=True,
        )


DIRTY_FILE = '''\
\\documentclass{article}
\\begin{document
\\end{document}
'''


def test_dirty_file(*, docker: str, tag: str) -> None:
    with tempfile.TemporaryDirectory() as tmpdir:
        with open(os.path.join(tmpdir, 'dirty_file.tex'), 'w') as f:
            f.write(DIRTY_FILE)

        res = subprocess.run((
            docker, 'run', '--rm',
            '--workdir',  '/chktex',
            '--volume', f'{tmpdir}:/chktex:ro',
            tag, 'chktex', 'dirty_file.tex',
        ))
        assert res.returncode != 0


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('tag')
    parser.add_argument('--use-podman', action='store_true')
    args = parser.parse_args()

    if args.use_podman:
        docker = 'podman'
    else:
        docker = 'docker'

    print(' version test '.center(79, '='), flush=True)
    test_version(docker=docker, tag=args.tag)
    print(' clean file test '.center(79, '='), flush=True)
    test_clean_file(docker=docker, tag=args.tag)
    print(' dirty file test '.center(79, '='), flush=True)
    test_dirty_file(docker=docker, tag=args.tag)

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
